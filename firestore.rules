// =============================================
// FILE: firestore.rules (UPDATED)
// Desc: Keep your rules and add explicit permissions for saved roster under events
// Notes:
// - Admin definition expanded via users/{uid}.roles OR profiles/{uid}.role/roles OR custom claim admin:true
// - Events readable by signed-in users; admins manage writes
// - Roster lives at events/{eventId}/roster_members/* and events/{eventId}/roster_summary/latest
// =============================================
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ----------------- Helpers -----------------
    function isSignedIn() { return request.auth != null; }
    function isSelf(uid) { return isSignedIn() && request.auth.uid == uid; }

    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function rolesArray() {
      return (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
              userDoc().data.roles is list)
             ? userDoc().data.roles : [];
    }

    // Additional admin sources
    function profileDoc() {
      return get(/databases/$(database)/documents/profiles/$(request.auth.uid));
    }
    function hasProfileAdmin() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        (
          (profileDoc().data.role is string && profileDoc().data.role == "admin") ||
          (profileDoc().data.roles is list && profileDoc().data.roles.hasAny(["admin","staff"]))
        );
    }
    function hasAdminClaim() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    function isAdmin() {
      return isSignedIn() && (
        rolesArray().hasAny(['admin']) ||
        hasProfileAdmin() ||
        hasAdminClaim()
      );
    }

    // ----------------- users -----------------
    match /users/{uid} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || isSelf(uid);
    }

    // ----------------- profiles -----------------
    match /profiles/{uid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isSelf(uid);
      allow update: if isAdmin() || (
        isSelf(uid) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'displayName','firstName','lastName','email','instrument','section','photoURL'
        ])
      );
    }

    // ----------------- events -----------------
    match /events/{eventId} {
      allow read: if isAdmin() || isSignedIn() || resource.data.status == 'published';
      allow create, update, delete: if isAdmin();

      // Per-event availability (owner/admin)
      match /availability/{uid} {
        allow read: if isAdmin() || isSelf(uid);
        allow write: if isAdmin() || (isSelf(uid) && !(exists(resource) && resource.data.finalized == true));
      }

      // Persisted roster under each event (NEW)
      match /roster_members/{uid} {
        allow read: if isAdmin() || isSignedIn();
        allow write: if isAdmin();
      }
      match /roster_summary/{docId} {
        allow read: if isAdmin() || isSignedIn();
        allow write: if isAdmin();
      }
    }

    // ----------------- inquiries -----------------
    match /inquiries/{inquiryId} {
      allow create: if
        request.resource.data.name is string && request.resource.data.name.size() > 0 && request.resource.data.name.size() <= 200 &&
        request.resource.data.email is string && request.resource.data.email.size() > 0 && request.resource.data.email.size() <= 320 &&
        (!('phone' in request.resource.data) || request.resource.data.phone is string) &&
        (!('org' in request.resource.data) || request.resource.data.org is string) &&
        (!('message' in request.resource.data) || (request.resource.data.message is string && request.resource.data.message.size() <= 5000)) &&
        (!('event' in request.resource.data) || (
          request.resource.data.event is map &&
          (!('title' in request.resource.data.event) || request.resource.data.event.title is string) &&
          (!('date' in request.resource.data.event) || request.resource.data.event.date is string) &&
          (!('start' in request.resource.data.event) || request.resource.data.event.start is string) &&
          (!('end' in request.resource.data.event) || request.resource.data.event.end is string) &&
          (!('location' in request.resource.data.event) || request.resource.data.event.location is string)
        )) &&
        (!('meta' in request.resource.data) || (
          request.resource.data.meta is map &&
          request.resource.data.meta.keys().hasOnly(['userAgent','tz']) &&
          (!('userAgent' in request.resource.data.meta) || request.resource.data.meta.userAgent is string) &&
          (!('tz' in request.resource.data.meta) || request.resource.data.meta.tz is string)
        )) &&
        (!('createdAt' in request.resource.data) || request.resource.data.createdAt is timestamp) &&
        (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt is timestamp) &&
        (!('status' in request.resource.data) || request.resource.data.status in ['new','in_progress','closed']);

      allow read, update, delete: if isAdmin();

      match /availability/{uid} {
        allow read: if isAdmin() || isSelf(uid);
        allow write: if isAdmin() || (isSelf(uid) && !(exists(resource) && resource.data.finalized == true));
      }
    }

    // ----------------- top-level mirrors -----------------
    match /availability/{flatId} {
      allow read: if isAdmin() || isSignedIn();
      allow write: if isAdmin() || (isSignedIn() && request.resource.data.uid == request.auth.uid);
    }

    match /availability_responses/{flatId} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow list: if isAdmin();
      allow write: if isAdmin() || (isSignedIn() && request.resource.data.uid == request.auth.uid && request.resource.data.status in ['yes','maybe','no']);
    }

    // ----------------- social_polls (example app area) -----------------
    match /social_polls/halloween2025/responses/{uid} {
      allow read: if isSignedIn();
      allow write: if isSelf(uid);
    }

    match /social_polls/halloween2025/markers/{uid} {
      allow read: if isSignedIn();
      allow write: if isSelf(uid);
    }

    match /social_polls/halloween2025 {
      allow read: if isSignedIn();
      allow write: if false;
    }
  }
}