rules_version = '2';
service cloud.firestore {
match /databases/{database}/documents {


function isSignedIn() { return request.auth != null; }
function isAdmin() {
// Mark admins via custom claims OR profile flag
return (request.auth.token.admin == true)
|| exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.isAdmin == true;
}


match /profiles/{uid} {
allow read: if isSignedIn();
allow write: if isSignedIn() && request.auth.uid == uid;
}


match /clients/{id} {
allow create: if true; // public lead forms ok
allow read: if isAdmin();
allow update, delete: if isAdmin();
}


match /inquiries/{id} {
allow create: if true; // public lead forms ok
allow read, update, delete: if isAdmin();
}


match /events/{id} {
allow read: if true; // public calendar visibility; tighten if needed


// Admins can manage
allow create, update, delete: if isAdmin();
}


match /rsvps/{rid} {
allow read: if isSignedIn();
allow create, update: if isSignedIn() && request.resource.data.uid == request.auth.uid;
allow delete: if isAdmin();
}

match /databases/{database}/documents {
    match /events/{eventId} {
      allow read: if true; // tighten as needed
      match /rsvps/{uid} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == uid;
        }
      }
    }
  }
}